"""
Application de Pr√©diction du Niveau de la Mer
-------------------------------------------
Auteur: [Votre nom]
Date: [Date]

Description:
Cette application analyse et visualise l'√©volution du niveau de la mer
en utilisant des donn√©es historiques et des m√©thodes de pr√©diction statistiques.
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from scipy.stats import linregress, norm
import numpy as np
import io
from typing import Tuple
from src.analysis import add_advanced_statistics, create_advanced_plots, seasonal_decomposition
from src.utils import validate_data_quality

# Configuration g√©n√©rale de l'application
st.set_page_config(
    page_title="Pr√©dicteur du Niveau de la Mer",
    page_icon="üåä",
    layout="wide"  # Mise en page large pour meilleure visualisation
)

# Style CSS personnalis√© pour am√©liorer l'interface
st.markdown("""
    <style>
    /* Style principal de l'application */
    .main {
        padding: 2rem;
    }
    /* Style du titre */
    .stTitle {
        color: #2c3e50;
        font-weight: bold;
    }
    /* Style des m√©triques */
    .stMetric {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 5px;
    }
    </style>
    """, unsafe_allow_html=True)

def load_data():
    """
    Charge et pr√©traite les donn√©es du niveau de la mer
    
    Fonctionnalit√©s:
    - Lecture du fichier CSV source
    - Validation des donn√©es d'entr√©e
    - Conversion des dates
    - Gestion des valeurs manquantes
    
    Retourne:
    DataFrame pandas contenant les donn√©es nettoy√©es
    """
    df = pd.read_csv("epa-sea-level.csv")
    # Conversion des ann√©es en format datetime pour meilleure manipulation
    df['Date'] = pd.to_datetime(df['Year'].astype(str) + '-01-01')
    return df

def create_prediction_data(
    df: pd.DataFrame,
    start_year: int,
    end_year: int,
    use_recent: bool = False
) -> Tuple[pd.Series, pd.Series, float, float, float]:
    """
    G√©n√®re les pr√©dictions du niveau de la mer
    
    Param√®tres:
    - df: DataFrame contenant les donn√©es historiques
    - start_year: Ann√©e de d√©but pour les pr√©dictions
    - end_year: Ann√©e de fin pour les pr√©dictions
    - use_recent: Si True, utilise uniquement les donn√©es depuis 2000
    
    Retourne:
    - years: S√©rie des ann√©es de pr√©diction
    - predictions: Valeurs pr√©dites
    - slope: Pente de la r√©gression (taux de changement)
    - intercept: Ordonn√©e √† l'origine
    - r2: Coefficient de d√©termination (qualit√© du mod√®le)
    """
    # Filtrage des donn√©es r√©centes si demand√©
    if use_recent:
        df = df[df["Year"] >= 2000]
    
    # Calcul de la r√©gression lin√©aire
    slope, intercept, r_value, p_value, std_err = linregress(
        df["Year"], 
        df["CSIRO Adjusted Sea Level"]
    )
    
    # G√©n√©ration des pr√©dictions
    years = pd.Series(range(start_year, end_year + 1))
    predictions = slope * years + intercept
    
    return years, predictions, slope, intercept, r_value**2

def add_configuration_section():
    """
    Configure les param√®tres de l'analyse dans la barre lat√©rale
    
    Param√®tres configurables:
    - Niveau de confiance des pr√©dictions
    - Type de r√©gression
    - Param√®tres visuels
    - Options d'affichage
    """
    st.sidebar.markdown("## Configuration")
    
    # Section des param√®tres du mod√®le
    st.sidebar.subheader("Param√®tres du Mod√®le")
    confidence_level = st.sidebar.slider(
        "Niveau de Confiance (%)",
        min_value=80,
        max_value=99,
        value=95,
        step=1,
        help="D√©finit la pr√©cision des intervalles de pr√©diction"
    )
    
    # Choix du type de r√©gression
    regression_type = st.sidebar.selectbox(
        "Type de R√©gression",
        ["Lin√©aire", "Polynomiale", "Moyenne Mobile"],
        help="S√©lectionnez la m√©thode de pr√©diction"
    )
    
    # Options suppl√©mentaires pour r√©gression polynomiale
    if regression_type == "Polynomiale":
        degree = st.sidebar.slider(
            "Degr√© du Polyn√¥me",
            min_value=2,
            max_value=5,
            value=2,
            help="Complexit√© du mod√®le polynomial"
        )
    
    # Param√®tres visuels
    st.sidebar.subheader("Param√®tres de Visualisation")
    theme = st.sidebar.selectbox(
        "Th√®me du Graphique",
        ["plotly_white", "plotly_dark", "seaborn", "simple_white"],
        help="Apparence g√©n√©rale du graphique"
    )
    
    # Options d'affichage
    show_uncertainty = st.sidebar.checkbox(
        "Afficher les Bandes d'Incertitude",
        value=True,
        help="Visualiser la marge d'erreur des pr√©dictions"
    )
    
    return {
        "confidence_level": confidence_level,
        "regression_type": regression_type,
        "theme": theme,
        "show_uncertainty": show_uncertainty,
        "degree": degree if regression_type == "Polynomiale" else None
    }

def calculate_moving_average(df, window=5):
    """Calcule la moyenne mobile des donn√©es du niveau de la mer"""
    return df["CSIRO Adjusted Sea Level"].rolling(window=window).mean()

def add_confidence_bands(fig, x, y, confidence_level, std_err):
    """
    Ajoute les bandes de confiance au graphique
    
    Param√®tres:
    - fig: Figure Plotly
    - x: Donn√©es de l'axe X
    - y: Donn√©es de l'axe Y
    - confidence_level: Niveau de confiance
    - std_err: Erreur standard
    """
    z_value = norm.ppf(1 - (1 - confidence_level/100)/2)
    std_dev = np.std(y)
    
    upper = y + z_value * std_dev
    lower = y - z_value * std_dev
    
    fig.add_trace(go.Scatter(
        x=x,
        y=upper,
        fill=None,
        mode='lines',
        line_color='rgba(68, 68, 68, 0)',
        showlegend=False
    ))
    
    fig.add_trace(go.Scatter(
        x=x,
        y=lower,
        fill='tonexty',
        mode='lines',
        line_color='rgba(68, 68, 68, 0)',
        name=f'Intervalle de Confiance {confidence_level}%'
    ))

@handle_errors
def main():
    """Fonction principale de l'application"""
    # En-t√™te
    st.title("üåä Analyse de la Mont√©e du Niveau de la Mer")
    st.markdown("---")

    # Chargement des donn√©es
    with st.spinner("Chargement des donn√©es..."):
        df = load_data()

    # Add data quality warnings
    warnings = validate_data_quality(df)
    if warnings:
        with st.expander("Avertissements sur la Qualit√© des Donn√©es"):
            for warning in warnings:
                st.warning(warning)

    # Sidebar controls
    st.sidebar.header("Contr√¥les du Tableau de Bord")
    
    # Add more control options
    analysis_type = st.sidebar.selectbox(
        "Type d'Analyse",
        ["De Base", "Avanc√©"],
        help="Choisissez le niveau d'analyse statistique √† afficher"
    )
    
    chart_type = st.sidebar.selectbox(
        "Type de Graphique",
        ["Ligne + Nuage", "Zone", "Bandes de Confiance"],
        help="S√©lectionnez le style de visualisation"
    )
    
    # Existing controls
    prediction_end_year = st.sidebar.slider(
        "Pr√©dire jusqu'en ann√©e:", 
        min_value=2020,
        max_value=2100,
        value=2050,
        step=5
    )
    
    show_confidence = st.sidebar.checkbox("Afficher l'Intervalle de Confiance", value=True)
    show_trend_analysis = st.sidebar.checkbox("Afficher l'Analyse de Tendance", value=True)

    # Add export options
    st.sidebar.markdown("### Options d'Exportation")
    export_format = st.sidebar.selectbox(
        "Format d'Exportation",
        ["CSV", "Excel", "JSON"]
    )
    
    if st.sidebar.button("Exporter les Donn√©es"):
        if export_format == "CSV":
            csv = df.to_csv(index=False)
            st.download_button(
                label="T√©l√©charger CSV",
                data=csv,
                file_name="sea_level_data.csv",
                mime="text/csv"
            )
        elif export_format == "Excel":
            buffer = io.BytesIO()
            df.to_excel(buffer, index=False)
            st.download_button(
                label="T√©l√©charger Excel",
                data=buffer,
                file_name="sea_level_data.xlsx",
                mime="application/vnd.ms-excel"
            )
        else:
            json_str = df.to_json(orient="records")
            st.download_button(
                label="T√©l√©charger JSON",
                data=json_str,
                file_name="sea_level_data.json",
                mime="application/json"
            )

    # Add configuration section
    config = add_configuration_section()

    # Main content
    col1, col2 = st.columns([2, 1])

    with col1:
        st.subheader("Visualisation des Pr√©dictions du Niveau de la Mer")
        
        # S√©lecteur de plage de dates
        min_date = pd.to_datetime(str(int(df["Year"].min())) + '-01-01')
        max_date = pd.to_datetime(str(int(df["Year"].max())) + '-01-01')
        
        date_range = st.date_input(
            "S√©lectionner la Plage de Dates",
            value=(min_date, max_date),
            min_value=min_date,
            max_value=max_date,
            help="Filtrer les donn√©es par plage de dates"
        )
        
        # Filter data based on selection using Year
        start_year = date_range[0].year
        end_year = date_range[1].year
        mask = (df["Year"] >= start_year) & (df["Year"] <= end_year)
        filtered_df = df[mask]
        
        # Create Plotly figure
        fig = go.Figure()

        # Add actual data points
        fig.add_trace(go.Scatter(
            x=filtered_df["Year"],
            y=filtered_df["CSIRO Adjusted Sea Level"],
            mode='markers',
            name='Donn√©es Historiques',
            marker=dict(color='blue', size=8)
        ))

        # Add predictions
        years_full, predictions_full, slope_full, intercept_full, r2_full = create_prediction_data(
            filtered_df, 1880, prediction_end_year
        )
        
        years_recent, predictions_recent, slope_recent, intercept_recent, r2_recent = create_prediction_data(
            filtered_df, 2000, prediction_end_year, use_recent=True
        )

        # Add full period prediction line
        fig.add_trace(go.Scatter(
            x=years_full,
            y=predictions_full,
            mode='lines',
            name='Tendance sur Toute la P√©riode',
            line=dict(color='red', width=2)
        ))

        # Add recent period prediction line
        fig.add_trace(go.Scatter(
            x=years_recent,
            y=predictions_recent,
            mode='lines',
            name='Tendance R√©cente (2000+)',
            line=dict(color='green', width=2)
        ))

        # Update layout
        fig.update_layout(
            title="Mont√©e du Niveau de la Mer au Fil du Temps",
            xaxis_title="Ann√©e",
            yaxis_title="Niveau de la Mer (pouces)",
            hovermode='x unified',
            template="plotly_white"
        )

        # Update visualization based on configuration
        if config["regression_type"] == "Polynomiale":
            # Add polynomial regression
            poly_features = np.polynomial.polynomial.polyfit(
                filtered_df["Year"],
                filtered_df["CSIRO Adjusted Sea Level"],
                deg=config["degree"]
            )
            # Add polynomial prediction line
            years_range = np.linspace(
                filtered_df["Year"].min(),
                prediction_end_year,
                num=500
            )
            predictions = np.polynomial.polynomial.polyval(years_range, poly_features)
            
            fig.add_trace(go.Scatter(
                x=years_range,
                y=predictions,
                mode='lines',
                name=f'Polynomial (degree={config["degree"]})',
                line=dict(color='purple', width=2)
            ))
        
        # Add uncertainty bands if enabled
        if config["show_uncertainty"]:
            add_confidence_bands(fig, years_full, predictions_full, config["confidence_level"], np.sqrt(std_err**2 * (1 + 1/len(filtered_df))))

        # Update layout with selected theme
        fig.update_layout(template=config["theme"])

        # Add advanced analysis if selected
        if analysis_type == "Avanc√©":
            # Calculate advanced statistics
            advanced_stats = add_advanced_statistics(filtered_df)
            
            # Create additional plots
            advanced_plots = create_advanced_plots(filtered_df, advanced_stats)
            
            # Display additional plots in new tabs
            tabs = st.tabs(["Main Plot", "Taux de Variation", "Tendances D√©cennales"])
            
            with tabs[0]:
                st.plotly_chart(fig, use_container_width=True)
            
            with tabs[1]:
                st.plotly_chart(advanced_plots['rate_of_change'], use_container_width=True)
            
            with tabs[2]:
                st.plotly_chart(advanced_plots['decadal_trends'], use_container_width=True)
                
            # Add seasonal decomposition if requested
            if st.checkbox("Afficher la D√©composition Saisonni√®re"):
                decomp = seasonal_decomposition(filtered_df)
                st.line_chart(decomp['trend'])
                st.line_chart(decomp['seasonal'])
                st.line_chart(decomp['residual'])
        else:
            # Display only the main plot for basic analysis
            st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.subheader("Analyse Statistique")
        
        # Add metric cards
        col2_1, col2_2 = st.columns(2)
        with col2_1:
            st.metric(
                "Niveau de Mont√©e de la Mer Moyen",
                f"{df['CSIRO Adjusted Sea Level'].mean():.2f} pouces",
                f"{slope_full:.4f} pouces/ann√©e"
            )
        with col2_2:
            st.metric(
                "Mont√©e Pr√©vue par 2050",
                f"{predictions_full.iloc[-1]:.2f} pouces",
                f"{predictions_full.iloc[-1] - df['CSIRO Adjusted Sea Level'].iloc[-1]:.2f} pouces"
            )

        # Display trend analysis
        if show_trend_analysis:
            st.markdown("### Analyse de Tendance")
            
            # Full period statistics
            st.markdown("**P√©riode Complexe (1880-pr√©sent)**")
            st.write(f"- Pente: {slope_full:.4f} pouces/ann√©e")
            st.write(f"- Score R¬≤: {r2_full:.4f}")
            st.write(f"- Mont√©e pr√©vue par {prediction_end_year}: "
                    f"{predictions_full.iloc[-1]-predictions_full.iloc[0]:.2f} pouces")
            
            # Recent period statistics
            st.markdown("**P√©riode R√©cente (2000-pr√©sent)**")
            st.write(f"- Pente: {slope_recent:.4f} pouces/ann√©e")
            st.write(f"- Score R¬≤: {r2_recent:.4f}")
            st.write(f"- Mont√©e pr√©vue par {prediction_end_year}: "
                    f"{predictions_recent.iloc[-1]-predictions_recent.iloc[0]:.2f} pouces")

        # Summary statistics
        st.markdown("### Statistiques de R√©sum√©")
        summary_stats = df["CSIRO Adjusted Sea Level"].describe()
        st.dataframe(summary_stats)

        # Add data exploration tab
        if st.checkbox("Afficher l'Explorateur de Donn√©es Brutes"):
            st.subheader("Explorateur de Donn√©es Brutes")
            
            # Add column selector
            columns_to_show = st.multiselect(
                "S√©lectionner les Colonnes",
                df.columns.tolist(),
                default=["Year", "CSIRO Adjusted Sea Level"]
            )
            
            # Show interactive table
            st.dataframe(
                df[columns_to_show],
                use_container_width=True,
                height=400
            )
            
            # Add basic statistics
            if st.checkbox("Afficher les Statistiques de Base"):
                st.write(df[columns_to_show].describe())

if __name__ == "__main__":
    main() 